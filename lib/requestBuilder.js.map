{"version":3,"sources":["../src/requestBuilder.js"],"names":[],"mappings":";;;;;;;;kBAIwB,c;;AAJxB;;AACA;;;;;;AAGe,SAAS,cAAT,CAAwB,GAAxB,EAA8H;AAAA,MAAjG,WAAiG,yDAAnF,EAAmF;;AAAA,mEAAJ,EAAI;;AAAA,iCAA7E,cAA6E;AAAA,MAA7E,cAA6E,uCAA5D,KAA4D;AAAA,kCAArD,eAAqD;AAAA,MAArD,eAAqD,wCAAnC,KAAmC;AAAA,8BAA5B,WAA4B;AAAA,MAA5B,WAA4B,oCAAd,KAAc;;AAC3I,SAAO,YAAa;AAAA,sCAAT,IAAS;AAAT,UAAS;AAAA;;AAClB,UAAM,OAAO,GAAP,KAAe,UAAf,GAA4B,qBAAO,IAAP,CAA5B,GAA2C,GAAjD;;AAEA,QAAM,wBACD,WADC,CAAN;;AAIA,QAAI,OAAO,SAAS,IAAhB,KAAyB,UAA7B,EAAyC;AACvC,eAAS,IAAT,GAAgB,SAAS,IAAT,iBAAiB,IAAjB,CAAhB;AACD;AACD,QAAI,OAAO,SAAS,IAAhB,KAAyB,WAAzB,IAAwC,OAAO,SAAS,IAAhB,KAAyB,QAArE,EAA+E;AAC7E,eAAS,IAAT,GAAgB,KAAK,SAAL,CAAe,SAAS,IAAxB,CAAhB;AACD;;AAED,WAAO,MAAM,GAAN,EAAW,QAAX,EACJ,IADI,CACC,UAAC,QAAD,EAAc;AAClB,cAAQ,SAAS,MAAjB;AACE,aAAK,GAAL;AACA,aAAK,GAAL;AACE,iBAAO,QAAP,CAHJ,CAGsB;AACpB;AACE,gBAAM,gCAAc,SAAS,MAAvB,EAA+B,EAAE,kBAAF,EAA/B,CAAN;AALJ;AAOD,KATI,EAUJ,IAVI,CAUC,UAAC,QAAD;AAAA,aAAc,iBAAiB,iCAAe,QAAf,SAA4B,IAA5B,EAAjB,GAAqD,SAAS,IAAT,EAAnE;AAAA,KAVD,EAWJ,IAXI,CAWC,UAAC,IAAD;AAAA,aAAU,kBAAkB,0BAAU,IAAV,EAAgB,eAAhB,CAAlB,GAAqD,IAA/D;AAAA,KAXD,EAYJ,KAZI,CAYE,cAAc,UAAC,GAAD;AAAA,aAAS,8BAAY,GAAZ,SAAoB,IAApB,EAAT;AAAA,KAAd,GAAmD,UAAC,GAAD,EAAS;AAAE,YAAM,GAAN;AAAY,KAZ5E,CAAP;AAaD,GA3BD;AA4BD","file":"requestBuilder.js","sourcesContent":["import { normalize } from 'normalizr';\nimport HttpError from 'standard-http-error';\n\n\nexport default function requestBuilder(url, requestOpts = {}, { handleResponse = false, normalizeSchema = false, handleError = false } = {}) {\n  return (...args) => {\n    url = typeof url === 'function' ? url(...args) : url;\n\n    const callOpts = {\n      ...requestOpts,\n    };\n\n    if (typeof callOpts.body === 'function') {\n      callOpts.body = callOpts.body(...args);\n    }\n    if (typeof callOpts.body !== 'undefined' && typeof callOpts.body !== 'string') {\n      callOpts.body = JSON.stringify(callOpts.body);\n    }\n\n    return fetch(url, callOpts)\n      .then((response) => {\n        switch (response.status) {\n          case 200:\n          case 201:\n            return response;  // Keep going!\n          default:\n            throw new HttpError(response.status, { response });\n        }\n      })\n      .then((response) => handleResponse ? handleResponse(response, ...args) : response.json())\n      .then((data) => normalizeSchema ? normalize(data, normalizeSchema) : data)\n      .catch(handleError ? (err) => handleError(err, ...args) : (err) => { throw err; });\n  };\n}\n"]}