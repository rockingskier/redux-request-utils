{"version":3,"sources":["../src/requestBuilder.js"],"names":[],"mappings":";;;;;;;;kBAMwB,c;;AANxB;;AACA;;;;;;AAGA,IAAM,UAAU,CAAC,MAAD,EAAS,KAAT,EAAgB,OAAhB,CAAhB;;AAEe,SAAS,cAAT,CAAwB,GAAxB,EAA8H;AAAA,MAAjG,WAAiG,yDAAnF,EAAmF;;AAAA,mEAAJ,EAAI;;AAAA,iCAA7E,cAA6E;AAAA,MAA7E,cAA6E,uCAA5D,KAA4D;AAAA,kCAArD,eAAqD;AAAA,MAArD,eAAqD,wCAAnC,KAAmC;AAAA,8BAA5B,WAA4B;AAAA,MAA5B,WAA4B,oCAAd,KAAc;;AAC3I,SAAO,UAAC,OAAD,EAAwB;AAAA,QAAd,IAAc,yDAAP,EAAO;;AAC7B,QAAM,UAAU,OAAO,GAAP,KAAe,UAAf,GAA4B,IAAI,OAAJ,EAAa,IAAb,CAA5B,GAAiD,GAAjE;AACA,QAAM,wBACD,WADC,CAAN;;AAIA,QAAI,UAAU,EAAd;AACA,QAAI,OAAO,QAAQ,QAAR,CAAiB,YAAY,MAA7B,IAAuC,OAAvC,GAAiD,SAA5D;;AAEA,QAAI,KAAK,SAAT,EAAoB;AAClB,cAAQ,eAAR,gBAAqC,KAAK,SAA1C;AACD;AACD,QAAI,OAAO,SAAS,OAAhB,KAA4B,UAAhC,EAA4C;AAC1C,gBAAU,SAAS,OAAT,CAAiB,OAAjB,EAA0B,OAA1B,EAAmC,IAAnC,CAAV;AACD;AACD,QAAI,QAAQ,aAAZ,EAA2B;AACzB,cAAQ,kCAAR,IAA8C,IAA9C;AACA,eAAS,WAAT,GAAuB,SAAvB;AACD;;AAED,QAAI,OAAO,SAAS,IAAhB,KAAyB,UAA7B,EAAyC;AACvC,aAAO,SAAS,IAAT,CAAc,IAAd,EAAoB,IAApB,CAAP;AACD;AACD,QAAI,OAAO,IAAP,KAAgB,WAAhB,IAA+B,OAAO,IAAP,KAAgB,QAAnD,EAA6D;AAC3D,aAAO,KAAK,SAAL,CAAe,IAAf,CAAP;AACA,cAAQ,QAAR,IAAoB,kBAApB;AACA,cAAQ,cAAR,IAA0B,kBAA1B;AACD;;AAED,aAAS,OAAT,GAAmB,OAAnB;AACA,aAAS,IAAT,GAAgB,IAAhB;;AAEA,WAAO,MAAM,OAAN,EAAe,QAAf,EACJ,IADI,CACC,UAAC,QAAD,EAAc;AAClB,cAAQ,SAAS,MAAjB;AACE,aAAK,GAAL;AACA,aAAK,GAAL;AACE,iBAAO,QAAP,CAHJ,CAGsB;AACpB;AACE,gBAAM,gCAAc,SAAS,MAAvB,EAA+B,EAAE,kBAAF,EAA/B,CAAN;AALJ;AAOD,KATI,EAUJ,IAVI,CAUC,UAAC,QAAD;AAAA,aAAc,iBAAiB,eAAe,QAAf,EAAyB,OAAzB,EAAkC,IAAlC,CAAjB,GAA2D,SAAS,IAAT,EAAzE;AAAA,KAVD,EAWJ,IAXI,CAWC,UAAC,IAAD;AAAA,aAAU,kBAAkB,0BAAU,IAAV,EAAgB,eAAhB,CAAlB,GAAqD,IAA/D;AAAA,KAXD,EAYJ,KAZI,CAYE,cAAc,UAAC,GAAD;AAAA,aAAS,YAAY,GAAZ,EAAiB,OAAjB,EAA0B,IAA1B,CAAT;AAAA,KAAd,GAAyD,UAAC,GAAD,EAAS;AACvE,YAAM,GAAN;AACD,KAdI,CAAP;AAeD,GA/CD;AAgDD","file":"requestBuilder.js","sourcesContent":["import { normalize } from 'normalizr';\nimport HttpError from 'standard-http-error';\n\n\nconst hasBody = ['POST', 'PUT', 'PATCH'];\n\nexport default function requestBuilder(url, requestOpts = {}, { handleResponse = false, normalizeSchema = false, handleError = false } = {}) {\n  return (payload, meta = {}) => {\n    const callUrl = typeof url === 'function' ? url(payload, meta) : url;\n    const callOpts = {\n      ...requestOpts,\n    };\n\n    let headers = {};\n    let body = hasBody.includes(requestOpts.method) ? payload : undefined;\n\n    if (meta.authToken) {\n      headers['Authorization'] = `Bearer ${meta.authToken}`;\n    }\n    if (typeof callOpts.headers === 'function') {\n      headers = callOpts.headers(headers, payload, meta);\n    }\n    if (headers.Authorization) {\n      headers['Access-Control-Allow-Credentials'] = true;\n      callOpts.credentials = 'include';\n    }\n\n    if (typeof callOpts.body === 'function') {\n      body = callOpts.body(body, meta);\n    }\n    if (typeof body !== 'undefined' && typeof body !== 'string') {\n      body = JSON.stringify(body);\n      headers['Accept'] = 'application/json';\n      headers['Content-Type'] = 'application/json';\n    }\n\n    callOpts.headers = headers;\n    callOpts.body = body;\n\n    return fetch(callUrl, callOpts)\n      .then((response) => {\n        switch (response.status) {\n          case 200:\n          case 201:\n            return response;  // Keep going!\n          default:\n            throw new HttpError(response.status, { response });\n        }\n      })\n      .then((response) => handleResponse ? handleResponse(response, payload, meta) : response.json())\n      .then((data) => normalizeSchema ? normalize(data, normalizeSchema) : data)\n      .catch(handleError ? (err) => handleError(err, payload, meta) : (err) => {\n        throw err;\n      });\n  };\n}\n"]}